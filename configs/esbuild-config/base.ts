// build.ts

import process from "process";
import { glob } from "glob";
import esbuild, { type BuildOptions } from "esbuild";

// --- 定数とヘルパー関数 ---

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

/**
 * ビルドモードを決定します。
 * process.argv[2] が 'production' であれば 'production'、それ以外は 'development' を返します。
 * @returns {'production' | 'development'} ビルドモード
 */
const getBuildMode = (): "production" | "development" => {
    return process.argv[2] === "production" ? "production" : "development";
};

/**
 * esbuildのベース設定を生成します。
 * @param mode ビルドモード
 * @returns esbuildの共通設定オブジェクト
 */
const createBaseConfig = (mode: "production" | "development"): BuildOptions => {
    const isProd = mode === "production";
    return {
        banner: { js: banner },
        logLevel: "info",
        minify: isProd,
        sourcemap: isProd ? false : "inline",
        treeShaking: true,
    };
};

// --- メインビルドスクリプト ---

/**
 * ビルドスクリプトのオプション
 */
export interface RunBuildOptions {
    /** エントリーポイント (globパターンまたはファイルパスの配列) */
    entryPoints: string | string[];
    /** 出力先ディレクトリ (デフォルト: 'dist') */
    outdir?: string;
    /** ビルドモード (デフォルト: process.argvから決定) */
    mode?: "production" | "development";
    /** esbuildのビルドオプションを上書き・追加する */
    override?: BuildOptions;
}

/**
 * CJSとESMの両形式でパッケージをビルドする共通関数。
 *
 * 開発モードではwatchモードで起動し、本番モードでは1回だけビルドして終了します。
 *
 * @param options ビルドオプション
 */
export async function runBuild({
    entryPoints: entryPointsPattern,
    outdir = "dist",
    mode = getBuildMode(),
    override = {},
}: RunBuildOptions) {
    try {
        const isProd = mode === "production";
        const baseConfig = createBaseConfig(mode);

        // エントリーポイントをglobパターンから解決
        const entryPoints = await getEntryPoints(entryPointsPattern);

        if (entryPoints.length === 0) {
            console.log("ℹ️ No entry points found. Exiting.");
            return; // プロセスを終了する代わりに正常にリターン
        }

        console.log(`📦 Building for ${mode}...`);
        console.log("📂 Entry points:", entryPoints);
        console.log("📤 Output directory:", outdir);

        // 全てのビルド形式で共通の設定
        const sharedConfig: BuildOptions = {
            ...baseConfig,
            entryPoints,
            bundle: true,
            target: "esnext",
            ...override, // ユーザーによる上書きを適用
        };

        // ビルドターゲット（CJS, ESM）ごとの個別設定
        const targets: BuildOptions[] = [
            {
                format: "cjs",
                outdir,
                outExtension: { ".js": ".js" },
            },
            {
                format: "esm",
                outdir,
                outExtension: { ".js": ".mjs" },
            },
        ];

        // 各ターゲットのビルドコンテキストを並行して作成
        const contexts = await Promise.all(
            targets.map((targetOptions) =>
                esbuild.context({ ...sharedConfig, ...targetOptions })
            )
        );

        if (isProd) {
            // 本番ビルド：1回だけ実行して終了
            console.log("🚀 Running production build...");
            await Promise.all(contexts.map((ctx) => ctx.rebuild()));
            await Promise.all(contexts.map((ctx) => ctx.dispose()));
            console.log("✅ Build complete.");
        } else {
            // 開発ビルド：watchモードで起動
            console.log("👀 Watching for changes...");
            await Promise.all(contexts.map((ctx) => ctx.watch()));
        }
    } catch (e) {
        console.error("❌ Build failed:", e);
        process.exit(1);
    }
}

// --- 使用例 ---
// このスクリプトを package.json から実行する場合
// "scripts": {
//   "dev": "node build.ts",
//   "build": "node build.ts production"
// }
// if (require.main === module) {
//   runBuild({
//     entryPoints: ["src/index.ts"],
//   });
// }

export async function getEntryPoints(
    pattarns: string[] | string
): Promise<string[]> {
    if (Array.isArray(pattarns)) {
        const results = await Promise.all(
            pattarns.map((pat) => getEntryPoints(pat))
        );
        return results.flat();
    } else {
        return glob(pattarns);
    }
}
