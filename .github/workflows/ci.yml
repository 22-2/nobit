name: CI

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    NODE_VERSION: "20"
    PNPM_VERSION: "10.17.0"

jobs:
    # 依存関係のインストールとビルド成果物の準備
    prepare:
        runs-on: ubuntu-latest
        outputs:
            cache-key: ${{ steps.cache-key.outputs.key }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Generate cache key
              id: cache-key
              run: |
                  echo "key=${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ steps.cache-key.outputs.key }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            # node_modulesをアーティファクトとして保存
            - name: Cache node_modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      apps/*/node_modules
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

    # 静的解析（型チェック、フォーマット）
    static-analysis:
        runs-on: ubuntu-latest
        needs: prepare
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Restore node_modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      apps/*/node_modules
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

            - name: Type check
              run: pnpm run check-types

    # 単体テスト
    unit-tests:
        runs-on: ubuntu-latest
        needs: prepare
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Restore node_modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      apps/*/node_modules
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

            - name: Run unit tests with coverage
              run: |
                  pnpm run test:unit
                  pnpm run test:coverage

            - name: Upload coverage artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-reports
                  path: packages/ui/coverage/
                  retention-days: 7

    # 全ジョブの完了確認
    ci-status:
        runs-on: ubuntu-latest
        needs: [static-analysis, unit-tests, storybook-tests] # e2e-tests を削除
        if: always()
        steps:
            - name: Check CI status
              run: |
                  echo "Static Analysis: ${{ needs.static-analysis.result }}"
                  echo "Unit Tests: ${{ needs.unit-tests.result }}"
                  echo "Storybook Tests: ${{ needs.storybook-tests.result }}"

                  if [[ "${{ needs.static-analysis.result }}" != "success" ||
                        "${{ needs.unit-tests.result }}" != "success" ||
                        "${{ needs.storybook-tests.result }}" != "success" ]]; then
                    echo "❌ Some CI jobs failed"
                    exit 1
                  fi

                  echo "✅ All CI jobs completed successfully!"
