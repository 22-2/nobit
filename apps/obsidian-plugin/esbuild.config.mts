import esbuild, { type Plugin } from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import { sveltePreprocess } from "svelte-preprocess";
import inlineWorkerPlugin from "esbuild-plugin-inline-worker";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

import fs from "fs";

const copyManifestPlugin = (): Plugin => ({
    name: "copy-manifest-plugin",
    setup(build) {
        build.onEnd(async () => {
            try {
                fs.cpSync("./manifest.json", "./dist/manifest.json"); // コピー元とコピー先を指定
            } catch (e) {
                console.error("Failed to copy file:", e);
            }
        });
    },
});

// esbuild の設定にプラグインを追加
// plugins: [copyManifestPlugin()],

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    plugins: [
        copyManifestPlugin(),
        inlineWorkerPlugin(),
        esbuildSvelte({
            compilerOptions: {
                css: "injected",
                warningFilter: (warning) => !warning.code.startsWith("a11y"), // a11y-から始まる警告をすべて無視
            },
            preprocess: sveltePreprocess(),
        }),
    ],
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins,
    ],
    format: "cjs",
    target: "esnext",
    logLevel: "info",
    minify: prod,
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "dist/main.js",
});

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
}
